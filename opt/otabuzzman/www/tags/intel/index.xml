<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intel on otabuzzman&#39;s blog</title>
    <link>http://localhost:1313/tags/intel/</link>
    <description>Recent content in Intel on otabuzzman&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Apr 2024 13:15:17 +0200</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/intel/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Parallel Java with TornadoVM (3)</title>
      <link>http://localhost:1313/posts/tornado-java-3/</link>
      <pubDate>Mon, 22 Apr 2024 13:15:17 +0200</pubDate>
      <guid>http://localhost:1313/posts/tornado-java-3/</guid>
      <description>&lt;p&gt;In my original setup, the PJ2 library is pre-installed in a separate folder, so I installed TornadoVM the same way. The installation is well &lt;a href=&#34;https://tornadovm.readthedocs.io/en/latest/installation.html&#34;&gt;documented&lt;/a&gt; and essentially requires cloning the repository and running the installer. &lt;strong&gt;Note&lt;/strong&gt; that the script uses Python and installs some modules. To keep the Python system configuration clean from this stuff I prefer setting up a Python &lt;em&gt;Virtual Environment&lt;/em&gt; before running the installer.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/beehive-lab/TornadoVM.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd TornadoVM&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# create Python Virtual Environment (venv)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# python -m venv .venv&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# activate venv for bash&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# source .venv/bin/activate&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bin/tornadovm-installer --jdk jdk21 --backend opencl,ptx,spirv&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once finished (after a couple of minutes and tons of logging on screen) there is a batch file &lt;code&gt;setvars.sh&lt;/code&gt; that must be sourced to run the &lt;code&gt;tornado&lt;/code&gt; CLI, and ask it to list the available accelerators.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parallel Java with TornadoVM (2)</title>
      <link>http://localhost:1313/posts/tornado-java-2/</link>
      <pubDate>Thu, 18 Apr 2024 13:15:17 +0200</pubDate>
      <guid>http://localhost:1313/posts/tornado-java-2/</guid>
      <description>&lt;p&gt;This second part of the report focuses on the changes necessary to separate a section of code and run it on an accelerator. Since I used TornadoVM&amp;rsquo;s &lt;a href=&#34;https://tornadovm.readthedocs.io/en/latest/programming.html#loop-parallel-api&#34;&gt;&lt;em&gt;Loop Parallel API&lt;/em&gt;&lt;/a&gt; the code in question is in the body of a for-loop.&lt;/p&gt;&#xA;&lt;p&gt;In my case the for-loop is inside an instance method of a nested class and shares variables with that class and also with the parent class. I had to change this concept because TornadoVM requires static methods for parallelization. So I defined method parameters for all shared variables and let TornadoVM pass them to the kernel. Some of these variables have multiple elements (e.g. matrices). I put these in memory buffers that TornadoVM passes to the accelerator.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parallel Java with CUDA</title>
      <link>http://localhost:1313/posts/parallel-java/</link>
      <pubDate>Thu, 11 Apr 2024 23:38:31 +0200</pubDate>
      <guid>http://localhost:1313/posts/parallel-java/</guid>
      <description>&lt;p&gt;An infographic about my first approach to parallelizing Java code in 2017. It worked for me then and probably still does, but now there are tools that are much easier to use and are also much more flexible. One is &lt;a href=&#34;https://www.tornadovm.org/&#34;&gt;TornadoVM&lt;/a&gt;, which essentially allows the programmer to mark up the code to be parallelized and does all the heavy lifting for execution on popular accelerators (AMD, Intel, NVIDIA) and multiple CPU cores. I created a tutorial on TornadoVM that was published in a German computer magazine: part &lt;a href=&#34;https://www.heise.de/select/ix/2024/2/2332508044372163045&#34;&gt;one&lt;/a&gt; and &lt;a href=&#34;https://www.heise.de/select/ix/2024/3/2332713580068863270&#34;&gt;two&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Parallel Java with TornadoVM</title>
      <link>http://localhost:1313/posts/tornado-java-1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/tornado-java-1/</guid>
      <description>&lt;p&gt;A few years ago I wrote a Java app that creates star maps (&lt;a href=&#34;https://chartacaeli.org/artistic-star-chart.pdf&#34;&gt;example&lt;/a&gt;). It does this by projecting the coordinates of celestial bodies onto a flat canvas. One of the features is to map images of artistic representations of certain star constellations onto the maps. The approach I took to perform the required calculations turned out to be quite slow.&lt;/p&gt;&#xA;&lt;p&gt;When I heard about &lt;a href=&#34;https://developer.nvidia.com/cuda-toolkit&#34;&gt;CUDA&lt;/a&gt; I was excited by the idea of doing computations on graphics cards. I wondered if my slow sequential Java code could be run much faster in parallel on a GPU.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
